Set up resources for your application Info
What is a user pool?
Check out your sign-in page
Your application login pages are ready. Explore a new sign-in and sign-up experience powered by Cognito.
View login page

Build authentication components for your application
Review a quick setup guide for your application type. Deploy a basic sample app or add code to your existing one.
Quick setup guide
What's the development platform for your single page application?
ReactIconReact
Angular IconAngular
JavaScript IconJavaScript
Add the example code to your application
1
Configure your user pool app client with allowed callback URLs, logout URLs, and the scopes that you want to request, for example openid and profile . Learn more 

2
Install the oidc-client-ts and react-oidc-context libraries.


npm install oidc-client-ts react-oidc-context --save
3
Configure react-oidc-context with the OIDC properties of your user pool.


// index.js
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import { AuthProvider } from "react-oidc-context";

const cognitoAuthConfig = {
  authority: "https://cognito-idp.us-east-2.amazonaws.com/us-east-2_I40ywxZTt",
  client_id: "3qfuovrlj0b4utfdia4be7tbs",
  redirect_uri: "http://localhost:5000/api/auth/discord/callback",
  response_type: "code",
  scope: "phone openid email",
};

const root = ReactDOM.createRoot(document.getElementById("root"));

// wrap the application with AuthProvider
root.render(
  <React.StrictMode>
    <AuthProvider {...cognitoAuthConfig}>
      <App />
    </AuthProvider>
  </React.StrictMode>
);
4
Generate a sign-in button that initiates an authorization request with your user pool OIDC provider, and a sign-out button that initiates a logout request.


// App.js

import { useAuth } from "react-oidc-context";

function App() {
  const auth = useAuth();

  const signOutRedirect = () => {
    const clientId = "3qfuovrlj0b4utfdia4be7tbs";
    const logoutUri = "<logout uri>";
    const cognitoDomain = "https://<user pool domain>";
    window.location.href = `${cognitoDomain}/logout?client_id=${clientId}&logout_uri=${encodeURIComponent(logoutUri)}`;
  };

  if (auth.isLoading) {
    return <div>Loading...</div>;
  }

  if (auth.error) {
    return <div>Encountering error... {auth.error.message}</div>;
  }

  if (auth.isAuthenticated) {
    return (
      <div>
        <pre> Hello: {auth.user?.profile.email} </pre>
        <pre> ID Token: {auth.user?.id_token} </pre>
        <pre> Access Token: {auth.user?.access_token} </pre>
        <pre> Refresh Token: {auth.user?.refresh_token} </pre>

        <button onClick={() => auth.removeUser()}>Sign out</button>
      </div>
    );
  }

  return (
    <div>
      <button onClick={() => auth.signinRedirect()}>Sign in</button>
      <button onClick={() => signOutRedirect()}>Sign out</button>
    </div>
  );
}

export default App;